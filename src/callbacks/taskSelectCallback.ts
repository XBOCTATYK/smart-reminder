import { NOTIFICATION_ENTITY_KEY, TASK_ENTITY_KEY } from '../constants/enitityNames';
import { TASK_SELECT_ACTION } from '../constants/callback-actions';

export async function taskSelectCallback(ctx, DB) {
    const answer = ctx.update?.callback_query?.data;

    if (!answer) return;

    const [action, taskId] = answer.split('/');

    if (action !== TASK_SELECT_ACTION) return;

    const model = await DB.model(NOTIFICATION_ENTITY_KEY).findOne({
        where: { task_id: taskId, done: false },
        include: [ DB.model(TASK_ENTITY_KEY) ]
    });

    const task = model.Task.dataValues;
    const notify = model.dataValues;

    const message = `
   ***${task.name}***
     
‚è± –í—Ä–µ–º—è –∑–∞–¥–∞—á–∏ - ${task.time}  
üìÖ –î–∞—Ç–∞ - ${task.date} 
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - ${task.priority} 
  
‚Üó Ô∏è–í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - ${notify.time} - ${notify.date}  
  
‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–∫–æ–Ω—á–µ–Ω–æ - ${task.notificationsDone}  
‚Ü™Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å - ${task.notificationsNeed - task.notificationsDone}  

   `;

    await ctx.replyWithMarkdown(message);
}
